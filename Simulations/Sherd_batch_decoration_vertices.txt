import bpy
import numpy as np
import json
import random
import os
from mathutils import Vector
from datetime import datetime
from addon_utils import enable

###~~~Z. Clean scene
def Clean_Scene():
   for obj in bpy.data.objects:
       bpy.data.objects.remove(obj)
       
Clean_Scene()

for i in range(2):
    Pot_Type = 'dr37a_pattern'

    ###~~~Z. pieces number
    S_Limit = 8

    ###~~~Z. Setting the time and random stamp for picture
    date = datetime.now().strftime("%Y%m%d%H%M%S")

    ###~~~Z. Setting the color
    NumX = random.randint(0, 550)
    NumX_1 = random.randint(0, NumX)
    color_r = 0.761
    color_b = NumX/1000
    color_g = NumX_1/1000
    color_a = 1

    blender_file = 'C:/Users/donni/Desktop/Work/Arch_I_Scan/Arch_I_Scan_ZD/Blender_code/Decoration_Model/dr37a_pattern.blend'


    ###~~~Z. GLOBAL VARIABLES 
    Test_Path_out = 'D:\\Donnie\\Current_processing\\BlenderTest\\Picture\\'
    path_out = 'D:\\Donnie\\Current_processing\\BlenderTest\\Picture\\'
    path_to_profiles = 'D:\\Donnie\\Current_processing\\BlenderTest\\Info\profiles\\'
    pot_class = Pot_Type
    sherd_times = 1 

    def Select_Fun(obj_):
        bpy.ops.object.select_all(action='DESELECT')
        bpy.data.objects[obj_.name].select_set(True)
        bpy.context.view_layer.objects.active  = obj_
        
                                 
    ###~~~Z. Append all objects starting with 'house'
    with bpy.data.libraries.load(blender_file) as (data_from, data_to):
        data_to.objects = [name for name in data_from.objects]

    for obj in data_to.objects:
        if obj is not None:
            bpy.context.collection.objects.link(obj)    

    section   = '\\Object\\'
    directory = blender_file + section
    filename  = 'pot_curve'
    bpy.ops.wm.append(filename=filename, directory=directory)
           
    ###~~~Z. Create an object with it    
    #obj = bpy.data.objects.new("pot_curve", curve)
    #bpy.context.scene.collection.objects.link(obj)
    Select_Fun(bpy.data.objects["pot_curve"])

    #bpy.ops.object.mode_set(mode='EDIT')
                

    ob = bpy.context.active_object
    
        #get the whole vertices
    whole = ob.data
    num_whole_v = len(whole.vertices)
    num_whole_e = len(whole.edges)
    num_whole_f = len(whole.polygons)

    # Get material
    mat = bpy.data.materials.get("Pot_Color")

    if mat is None:
        # create material
        mat = bpy.data.materials.new(name="Pot_Color")

    # Assign it to object
    if ob.data.materials:
        # assign to 1st material slot
        ob.data.materials[0] = mat
    else:
        # no slots
        ob.data.materials.append(mat)
                    
    ob = bpy.context.active_object
    bpy.ops.object.material_slot_add()
    bpy.context.object.active_material_index = 1
    mat1 = bpy.data.materials.get("Int_Color")

    if mat1 is None:
        # create material
        mat1 = bpy.data.materials.new(name="Int_Color")

    # Assign it to object
    if ob.data.materials:
        # assign to 1st material slot
        ob.data.materials[1] = mat1
    else:
        # no slots
        ob.data.materials.append(mat1)       
        
    ###~~~Z. enable 'cell fracture' to save the piece as fbx file

    enable('object_fracture_cell')
    bpy.ops.object.add_fracture_cell_objects(source_limit = S_Limit, material_index = 1, collection_name = "Pot_pieces")


    random_number = random.randint(1,100)

    ###~~~Z. Save the piece to 'fbx' files
    objects = bpy.data.collections['Pot_pieces']
    for object in objects.objects:
        bpy.ops.object.select_all(action = 'DESELECT')
        object.select_set(state = True)
        
        #get sherd vertice and caculate percentage and output the results
        obj = object.data
        num_obj = len(obj.vertices)
        percen = int((num_obj/num_whole_v)*100)
        
        
        exportName = Test_Path_out + Pot_Type + '_' + object.name + date + str(random_number) + '_' + format(str(percen),'0>3s') + '.fbx'
#        exportName = Test_Path_out + Pot_Type + '_' + object.name + date + str(random_number) + '.fbx'
        bpy.ops.export_scene.fbx(filepath = exportName, use_selection = True)

    #    for m in bpy.data.materials:
    #        bpy.data.materials.remove(m)
    obj = bpy.context.object
    obj.data.materials.clear()
            
    #collection_sherd = bpy.data.collections.get('Pot_pieces')
    #for obj in collection_sherd.objects:
    #    bpy.data.objects.remove(obj, do_unlink = True)
    #    
    #bpy.data.collections.remove(collection_sherd)

    Clean_Scene()